{"version":3,"sources":["index.js"],"names":["CountdownTimer","selector","targetData","refs","days","document","querySelector","hours","mins","secs","timerFace","setInterval","currentTime","Date","now","deltaTime","updateTimerFace","getTimeComponents","innerHTML","counter","pad","value","String","padStart","time","Math","floor","renderCoutnDownTime"],"mappings":";AAsEC,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EAtEKA,IAAAA,EAAAA,WACkC,SAAA,EAAA,GAAxBC,IAAAA,EAAAA,EAAAA,SAAUC,EAAAA,EAAAA,WAAc,EAAA,KAAA,GAC/BD,KAAAA,SAAWA,EACXC,KAAAA,WAAaA,EAEbC,KAAAA,KAAO,CACVC,KAAMC,SAASC,cAAc,2BAC7BC,MAAOF,SAASC,cAAc,4BAC9BE,KAAMH,SAASC,cAAc,2BAC7BG,KAAMJ,SAASC,cAAc,2BAC7BI,UAAWL,SAASC,cAAc,aA4DvC,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,sBAzDuB,MAAA,WAAA,IAAA,EAAA,KACpBK,YAAY,WACV,EAAKC,YAAcC,KAAKC,MAClBC,IAAAA,EAAY,EAAKb,WAAa,EAAKU,YACzC,EAAKI,gBAAgBC,EAAkBF,KAEtC,OAmDN,CAAA,IAAA,kBAjD8C,MAAA,SAAA,GAA3BX,IAAAA,EAAAA,EAAAA,KAAMG,EAAAA,EAAAA,MAAOC,EAAAA,EAAAA,KAAMC,EAAAA,EAAAA,KAC9BN,KAAAA,KAAKC,KAAKc,UAAYd,EACtBD,KAAAA,KAAKI,MAAMW,UAAYX,EACvBJ,KAAAA,KAAKK,KAAKU,UAAYV,EACtBL,KAAAA,KAAKM,KAAKS,UAAYT,MA6C9B,EAtEKT,GA6BAmB,EAAU,IAAInB,EAAe,CACjCC,SAAU,WAEVC,WAAY,IAAIW,KAAK,kBAIvB,SAASO,EAAIC,GACJC,OAAAA,OAAOD,GAAOE,SAAS,EAAG,KAGnC,SAASN,EAAkBO,GA6BlB,MAAA,CAAEpB,KAxBIgB,EAAIK,KAAKC,MAAMF,EAAQ,QAwBrBjB,MAjBDa,EACZK,KAAKC,MAAOF,EAAQ,MAAyB,OAgBzBhB,KAVTY,EACXK,KAAKC,MAAOF,EAAQ,KAAoB,MASdf,KAFfW,EAAIK,KAAKC,MAAOF,EAAQ,IAAc,OAjCrDL,EAAQQ","file":"src.5b83e6a4.js","sourceRoot":"../src","sourcesContent":["class CountdownTimer {\n  constructor({ selector, targetData }) {\n    this.selector = selector;\n    this.targetData = targetData;\n\n    this.refs = {\n      days: document.querySelector('span[data-value=\"days\"]'),\n      hours: document.querySelector('span[data-value=\"hours\"]'),\n      mins: document.querySelector('span[data-value=\"mins\"]'),\n      secs: document.querySelector('span[data-value=\"secs\"]'),\n      timerFace: document.querySelector('#timer-1'),\n    };\n  }\n  renderCoutnDownTime() {\n    setInterval(() => {\n      this.currentTime = Date.now();\n      const deltaTime = this.targetData - this.currentTime;\n      this.updateTimerFace(getTimeComponents(deltaTime));\n      // console.log(deltaTime);\n    }, 1000);\n  }\n  updateTimerFace({ days, hours, mins, secs }) {\n    this.refs.days.innerHTML = days;\n    this.refs.hours.innerHTML = hours;\n    this.refs.mins.innerHTML = mins;\n    this.refs.secs.innerHTML = secs;\n  }\n}\n\nconst counter = new CountdownTimer({\n  selector: '#timer-1',\n\n  targetData: new Date('Nov 11, 2020'),\n});\ncounter.renderCoutnDownTime();\n\nfunction pad(value) {\n  return String(value).padStart(2, '0');\n}\n\nfunction getTimeComponents(time) {\n  /*\n   * Оставшиеся дни: делим значение UTC на 1000 * 60 * 60 * 24, количество\n   * миллисекунд в одном дне (миллисекунды * секунды * минуты * часы)\n   */\n  const days = pad(Math.floor(time / (1000 * 60 * 60 * 24)));\n\n  /*\n   * Оставшиеся часы: получаем остаток от предыдущего расчета с помощью оператора\n   * остатка % и делим его на количество миллисекунд в одном часе\n   * (1000 * 60 * 60 = миллисекунды * минуты * секунды)\n   */\n  const hours = pad(\n    Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)),\n  );\n  /*\n   * Оставшиеся минуты: получаем оставшиеся минуты и делим их на количество\n   * миллисекунд в одной минуте (1000 * 60 = миллисекунды * секунды)\n   */\n  const mins = pad(\n    Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)),\n  );\n\n  /*\n   * Оставшиеся секунды: получаем оставшиеся секунды и делим их на количество\n   * миллисекунд в одной секунде (1000)\n   */\n  const secs = pad(Math.floor((time % (1000 * 60)) / 1000));\n\n  return { days, hours, mins, secs };\n}\n"]}